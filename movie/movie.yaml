openapi: 3.0.3
info:
  title: Movie Service API
  version: 1.0.0
  description: Service Films (lecture, ajout, suppression, MAJ rating, recherches simples).

servers:
  - url: http://localhost:3200

paths:
  /:
    get:
      summary: Accueil
      responses:
        "200": { description: OK }

  /json:
    get:
      summary: Lister tous les films
      responses:
        "200":
          description: Tableau de films
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Movie' }

  /movies/{movieid}:
    get:
      summary: Récupérer un film par ID
      parameters:
        - in: path
          name: movieid
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Film trouvé
          content: { application/json: { schema: { $ref: '#/components/schemas/Movie' } } }
        "400":
          description: Inexistant
          content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } }
    delete:
      summary: Supprimer un film
      parameters:
        - in: path
          name: movieid
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Film supprimé (renvoyé)
          content: { application/json: { schema: { $ref: '#/components/schemas/Movie' } } }
        "400":
          description: Inexistant
          content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } }

  /movies/{movieid}/title:
    get:
      summary: Titre d’un film
      parameters:
        - in: path
          name: movieid
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Titre uniquement
          content:
            application/json:
              schema:
                type: object
                properties:
                  title: { type: string }
        "400":
          description: Inexistant
          content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } }

  /moviesbytitle:
    get:
      summary: Film par titre (query)
      parameters:
        - in: query
          name: title
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Film
          content: { application/json: { schema: { $ref: '#/components/schemas/Movie' } } }
        "400":
          description: Non trouvé
          content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } }

  /moviesbydirector:
    get:
      summary: Film par réalisateur (query)
      parameters:
        - in: query
          name: director
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Film
          content: { application/json: { schema: { $ref: '#/components/schemas/Movie' } } }
        "400":
          description: Non trouvé
          content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } }

  /addmovie/{movieid}:
    post:
      summary: Ajouter un film (payload libre selon ton JSON)
      parameters:
        - in: path
          name: movieid
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/Movie' }
      responses:
        "200":
          description: Ajout OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
        "409":
          description: Conflit ID existant
          content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } }

  /movies/{movieid}/{rate}:
    put:
      summary: Mettre à jour le rating
      parameters:
        - in: path
          name: movieid
          required: true
          schema: { type: string }
        - in: path
          name: rate
          required: true
          schema: { type: string }
      responses:
        "200":
          description: Film mis à jour
          content: { application/json: { schema: { $ref: '#/components/schemas/Movie' } } }
        "201":
          description: ID non trouvé (ton code actuel renvoie 201 ici)
          content: { application/json: { schema: { $ref: '#/components/schemas/Error' } } }

components:
  schemas:
    Movie:
      type: object
      properties:
        id: { type: string }
        title: { type: string }
        director: { type: string }
        rating: { type: string }
      required: [id, title, director]
      example:
        id: "a8034f44-aee4-44cf-b32c-74cf452aaaae"
        title: "Interstellar"
        director: "Christopher Nolan"
        rating: "8.6"

    Error:
      type: object
      properties:
        error: { type: string }
      required: [error]
